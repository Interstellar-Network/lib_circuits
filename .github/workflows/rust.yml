name: Build and Test

on:
  push:

jobs:
  cpp:
    runs-on: ubuntu-latest
    steps:
      # install build dependencies
      # MUST match the same step in Dockerfile
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev libpng-dev
      - name: install "internal" dependencies
        # TODO yosys: use proper Release build
        run: |
          wget https://github.com/Interstellar-Network/yosys/releases/download/yosys-0.29/yosys-0.1.29-Linux.deb -O yosys.deb
          sudo apt-get install -y --no-install-recommends ./yosys.deb
          wget https://github.com/Interstellar-Network/abc/releases/download/0.2.0/abc-0.1.1-Linux.deb -O abc.deb
          sudo apt-get install -y --no-install-recommends ./abc.deb

      - uses: Interstellar-Network/gh-actions/prepare@v3-dev
        with:
          ssh_key_input: ${{ inputs.ssh_key_input }}
          install_cmake_and_ninja: true

      - name: DEBUG cpuinfo
        run: |
          cat /proc/cpuinfo

      - uses: Interstellar-Network/gh-actions/cmake-build-and-test@v3-dev
        with:
          working-directory: "${{ github.workspace }}/circuit-gen-rs/"

  ##############################################################################
  ##############################################################################
  rust_test:
    runs-on: ubuntu-latest
    steps:
      # install build dependencies
      # MUST match the same step in Dockerfile
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev libpng-dev
      - name: install "internal" dependencies
        # TODO yosys: use proper Release build
        run: |
          wget https://github.com/Interstellar-Network/yosys/releases/download/yosys-0.29/yosys-0.1.29-Linux.deb -O yosys.deb
          sudo apt-get install -y --no-install-recommends ./yosys.deb
          wget https://github.com/Interstellar-Network/abc/releases/download/0.2.0/abc-0.1.1-Linux.deb -O abc.deb
          sudo apt-get install -y --no-install-recommends ./abc.deb

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/prepare@v3-dev
        with:
          ssh_key_input: ${{ secrets.SSH_KEY_MACHINE_USER_INTERSTELLAR_CI }}
          install_cmake_and_ninja: true

      - uses: Interstellar-Network/gh-actions/prepare_rust@v3-dev
        with:
          toolchain_components: "rustfmt,clippy"

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/rust-build-and-test@v3-dev

      - uses: Interstellar-Network/gh-actions/rust-build-and-test@v3-dev
        with:
          test_args: "--features=eval_plain"

      # WARNING: "test_generic_lfsr_comb_all_probas" is slow, and apparently running it in
      # parallel with other tests makes them fail; probably b/c there are locks on Yosys and ABC calls,
      # but NOT on the library globally
      # -> so for now just run the ignored test separately
      - uses: Interstellar-Network/gh-actions/rust-build-and-test@v3-dev
        with:
          test_args: "--features=eval_plain -- --ignored"
          # default: 60s * 5 = 5 minutes = 300 s
          # but these take around 5 min so we x2 the margin
          test_timeout_seconds: 600

      ##########################################################################

      # TODO move into separate action? ideally into a JS action "post" that setup ccache?
      # NOTE: remove if using "rust-build-and-test"
      - name: Print ccache/sccache stats
        # display stats even if tests failed
        if: always()
        run: |
          ccache --show-stats || true
          sccache --show-stats || true
        shell: bash

  ##############################################################################
  ##############################################################################
  rust_lint:
    runs-on: ubuntu-latest
    steps:
      # install build dependencies
      # MUST match the same step in Dockerfile
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev libpng-dev
      - name: install "internal" dependencies
        # TODO yosys: use proper Release build
        run: |
          wget https://github.com/Interstellar-Network/yosys/releases/download/yosys-0.29/yosys-0.1.29-Linux.deb -O yosys.deb
          sudo apt-get install -y --no-install-recommends ./yosys.deb
          wget https://github.com/Interstellar-Network/abc/releases/download/0.2.0/abc-0.1.1-Linux.deb -O abc.deb
          sudo apt-get install -y --no-install-recommends ./abc.deb

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/prepare@v3-dev
        with:
          ssh_key_input: ${{ secrets.SSH_KEY_MACHINE_USER_INTERSTELLAR_CI }}
          install_cmake_and_ninja: true

      - uses: Interstellar-Network/gh-actions/prepare_rust@v3-dev
        with:
          toolchain_components: "rustfmt,clippy"

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/rust-lint@v3-dev

      ##########################################################################

      # TODO move into separate action? ideally into a JS action "post" that setup ccache?
      # NOTE: remove if using "rust-build-and-test"
      - name: Print ccache/sccache stats
        # display stats even if tests failed
        if: always()
        run: |
          ccache --show-stats || true
          sccache --show-stats || true
        shell: bash

  ##############################################################################
  ##############################################################################
  no_std:
    runs-on: ubuntu-latest
    steps:
      # install build dependencies
      # MUST match the same step in Dockerfile
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev libpng-dev
      - name: install "internal" dependencies
        # TODO yosys: use proper Release build
        run: |
          wget https://github.com/Interstellar-Network/yosys/releases/download/yosys-0.29/yosys-0.1.29-Linux.deb -O yosys.deb
          sudo apt-get install -y --no-install-recommends ./yosys.deb
          wget https://github.com/Interstellar-Network/abc/releases/download/0.2.0/abc-0.1.1-Linux.deb -O abc.deb
          sudo apt-get install -y --no-install-recommends ./abc.deb

      ##########################################################################
      # This is pretty dumb: we MUST call action/checkout BEFORE using a local action...
      # else: Error: Can't find 'action.yml', 'action.yaml' or 'Dockerfile' under '/home/runner/work/rs-common/rs-common/.github/actions/setup'. Did you forget to run actions/checkout before running your local action?
      - uses: Interstellar-Network/gh-actions/prepare@v3-dev
        with:
          ssh_key_input: ${{ secrets.SSH_KEY_MACHINE_USER_INTERSTELLAR_CI }}
          install_cmake_and_ninja: true

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/prepare_rust@v3-dev
        with:
          # no particular requirement; but should pin a version else the cache is thrashed everyday
          toolchain_channel: "nightly-2023-04-15"
          toolchain_components: ""

      ##########################################################################

      # cf circuit-gen-rs/src/CMakeLists.txt at the top "RUST_CXX_INCLUDE_DIR"
      # usually done when using eg "cargo build", and symlinked to target/
      #
      # CHECK locally with `find -L . -type f -name "cxx.h"`
      #   -> ./target/cxxbridge/rust/cxx.h [...]
      #
      # - name: add cxx.h
      #   run: |
      #     mkdir -p target/cxxbridge/rust
      #     wget -O target/cxxbridge/rust/cxx.h https://raw.githubusercontent.com/dtolnay/cxx/master/include/cxx.h
      #   shell: bash
      #
      # But then we end up with a missing "#include "circuit-gen-rs/src/lib.rs.h""
      # so just run "cargo build"
      - name: cargo build
        run: |
          cargo build
        shell: bash

      - name: cargo no-std-check
        run: |
          cargo install cargo-no-std-check
          cargo no-std-check --no-default-features --features=alloc,tikv-jemallocator,panic
        shell: bash

  ##############################################################################
  ##############################################################################
  android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # cf https://stackoverflow.com/questions/66025220/paired-values-in-github-actions-matrix
        # list of pairs:
        # - cargo target
        # - NDK "ANDROID_ABI"
        android-target:
          [
            {
              cargo_target: "aarch64-linux-android",
              android_abi: "arm64-v8a",
              experimental: false,
            },
            {
              cargo_target: "armv7-linux-androideabi",
              android_abi: "armeabi-v7a",
              experimental: false,
            },
          ]
    steps:
      ##########################################################################

      - uses: Interstellar-Network/gh-actions/prepare@v3-dev
        with:
          ssh_key_input: ${{ secrets.SSH_KEY_MACHINE_USER_INTERSTELLAR_CI }}
          install_cmake_and_ninja: true

      - uses: Interstellar-Network/gh-actions/prepare_rust@v3-dev
        with:
          toolchain_components: ""

      ##########################################################################
      # cf https://github.com/android-actions/setup-android

      # for now https://github.com/actions-rs/toolchain only support one "target"...
      # TODO? "x86_64-unknown-linux-gnu"
      - run: rustup target add ${{ matrix.android-target.cargo_target }}

      # TODO apparently this is not cached?
      # if not: cache the whole "Setup Android SDK"+"Delete old NDK v23"+"Install NDK v24"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # else: "Warning: Observed package id 'ndk;23.2.8568313' in inconsistent location '/usr/local/lib/android/sdk/ndk-bundle' (Expected '/usr/local/lib/android/sdk/ndk/23.2.8568313')"
      - run: sdkmanager --list_installed
      - name: Delete old NDK v23
        # version required else: "Warning: Failed to find package 'ndk'"
        run: sdkmanager --uninstall "ndk;23.2.8568313"
      - name: Install NDK v25
        # version required else: "Warning: Failed to find package 'ndk'"
        # MUST match version used at NDK_ROOT below! Careful when updating!
        run: sdkmanager "ndk;25.2.9519653"

      ##########################################################################
      # compile for android
      # NOTE: AR is NOT is the same PATH as CC/CXX
      # cf https://github.com/Interstellar-Network/wallet-app/blob/master/shared/build.gradle.kts
      # For how/which variables are used
      - name: setup env vars for Rust Android build
        # NDK_ROOT MUST match version installed above
        # cf https://github.com/android-actions/setup-android/blob/main/src/main.ts#L184
        # to see what env var are available
        run: |
          export NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653
          echo NDK_ROOT=$NDK_ROOT
          ls -al $NDK_ROOT/..

          echo "CC_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang" >> $GITHUB_ENV
          echo "CXX_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang++" >> $GITHUB_ENV
          echo "AR_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang" >> $GITHUB_ENV

          echo "CC_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang" >> $GITHUB_ENV

          echo "CMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=21" >> $GITHUB_ENV
        shell: bash

      # NOTE: we only care about the crate "circuit-types-rs" b/c that is dep of "lib-garble-rs"
      # which is in turn used by the Android apps; "circuit-gen-rs" is only for the server-side.
      - name: Compile Android ${{ matrix.android-target.cargo_target }}
        run: |
          cargo build -p circuit-types-rs --verbose --target=${{ matrix.android-target.cargo_target }}
        env:
          ANDROID_ABI: ${{ matrix.android-target.android_abi }}
        shell: bash
        # TODO it fails b/c of pointer size difference, at least in Scuttlebut
        # but as we are still not in PROD/GA, we only care about aarch64 for now
        continue-on-error: ${{ matrix.android-target.experimental }}
